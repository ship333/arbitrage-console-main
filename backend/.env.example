# CORS origins (comma-separated)
CORS_ORIGINS=http://localhost:5173,http://127.0.0.1:5173,http://localhost:4173,http://127.0.0.1:4173
CORS_ALLOW_HEADERS=Authorization,Content-Type
CORS_ALLOW_METHODS=GET,POST,PUT,DELETE,OPTIONS

# Server bind
HOST=0.0.0.0
PORT=8080

# Debug
DEBUG=1

# Auth (set REQUIRE_AUTH=1 for prod)
REQUIRE_AUTH=0
# Inline tokens (comma-separated) for demo; prefer AUTH_TOKENS_FILE in prod
AUTH_TOKENS=
# Optional file with one token per line
AUTH_TOKENS_FILE=

# Deployment stage: dev | staging | prod
STAGE=dev

# Rate limit control endpoints (per identity per minute). 0 disables.
RATE_LIMIT_CONTROL_PER_MIN=10

# WS demo broadcast interval (seconds)
WS_BROADCAST_INTERVAL=2

# Exchange API (dev defaults)
EXCHANGE_BASE_URL=https://example-exchange.invalid
EXCHANGE_API_KEY=
EXCHANGE_API_SECRET=
# Or load via files (Docker secrets):
EXCHANGE_API_KEY_FILE=
EXCHANGE_API_SECRET_FILE=

# Hyperliquid integration (backtests)
# Enable to source backtest results from the hyperliquid_bot project instead of mock data
BACKTEST_USE_HYPERLIQUID=0
# Absolute path to the hyperliquid_bot project (e.g., C:\\Users\\16782\\CascadeProjects\\hyperliquid_bot)
HLIQ_BOT_PATH=
# CSV file path for backtests (defaults to <HLIQ_BOT_PATH>/historical_data.csv if empty)
BACKTEST_DATA_FILE=

# Hyperliquid live collector (Node) â€” enable to stream live status + quotes over /api/ws
# When enabled, the backend will spawn `npm run -s live:collect` inside HLIQ_BOT_PATH and
# stream from files written under the NDJSON dir. These files are:
#   - ws_status.json (status snapshot)
#   - live_YYYYMMDD.ndjson (newline-delimited events incl. { type: 'quote', ... })
# Note: All variables in this .env are inherited by the Node process.
HLIQ_NODE_COLLECTOR=0
# Optional override for the start command (defaults to "npm run -s live:collect")
HLIQ_NODE_COLLECTOR_CMD=
# NDJSON output directory relative to HLIQ_BOT_PATH (defaults to 'data')
HLIQ_NODE_NDJSON_DIR=data

# Common Node collector options (optional; forwarded via env):
# Trigger mode: 'poll' (default) or 'blocks' to tick on new heads
LIVE_TRIGGER_MODE=poll
# Pairs and venues sampling (examples)
# PAIRS=UBTC/WHYPE,UETH/WHYPE
# TOKENS=UBTC:0x...,UETH:0x...,WHYPE:0x...
# Alchemy WS (newHeads recommended to drive 'blocks' mode)
# ALCHEMY_WS_URL=wss://hyperliquid-mainnet.g.alchemy.com/v2/<key>
# ALCHEMY_WS_HEADS=true
# GoldRush GraphQL WS (optional reference prices for enrichment)
# GOLDRUSH_API_KEY=
# GOLDRUSH_WS_URL=wss://gr-staging-v2.streaming.covalenthq.com/graphql
# GOLDRUSH_WS_PROTOCOL=graphql-transport-ws
# GOLDRUSH_WS_QUERY=
